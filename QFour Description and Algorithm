The Fibonacci sequence is a set of numbers that starts with a one or a zero, followed by a one, and proceeds based on the rule that each number (called a Fibonacci number) is equal to the sum of the preceding two numbers. If the Fibonacci sequence is denoted F (n), where n is the first term in the sequence, the following equation obtains for n = 0, where the first two terms are defined as 0 and 1 by convention.
Where,Multithreading is similar to multitasking, but enables the processing of multiple threads at one time, rather than multiple processes. Here, a multithreaded operating system may run several background tasks, such as logging file changes, indexing data, and managing windows at the same time.
Here in program it is expressed as
f ib0 = 0
f ib1 = 1
f ibn = f ibn−1 + f ibn−2
The program works as the user first enter the Fibonacci numbers that the program is to generate and then it creates a separate thread that will generate the fibonacci numbers placing the sequence in data that can be shared by the threads, then thread finishes its execution where the parent thread will output the sequence generated by the child thread, the parent thread will have to wait for the child thread to finish before outputting the fibonacci sequence executed by the parent threads.


Algorithm

•	Start
•	Declare variable int a,pid,i=0,j=0
•	Initialize the variables a=1;
•	a multithreaded program that generates the Fibonacci sequence
•	print the following terms
•	int fib(int a);
•	void *func(void *a);
•	int main()
•	int a;
•	pthread_t pthread;
•	scanf("%d",&a);
•	pthread_create(&pthread ,NULL,func,(void *)a);
•	pthread_join(pthread,NULL);
•	return 0;
•	void *func(void *a){
•	int d = (int)a;
•	int i;
•	use the loop for the following steps
•	for(i=1;i<d;i++)
•	printf("%d",fib(i)
•	 int fib(int a){
•	 if( a<=1)
•	printf("%d \t",(int)a)
•	return a;
•	Else
•	return fib(a-1) + fib(a-2); 
•	print the value of show…this input is 8..
•	END
